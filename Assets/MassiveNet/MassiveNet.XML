<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MassiveNet</name>
    </assembly>
    <members>
        <member name="F:MassiveNet.CommandDispatcher.paramTypes">
            <summary> Command RPC IDs and associated param types. </summary>
        </member>
        <member name="M:MassiveNet.CommandDispatcher.Send(System.Int32,MassiveNet.NetConnection,System.Object[])">
            <summary> Creates and sends a reliable command to a single connection. </summary>
        </member>
        <member name="M:MassiveNet.CommandDispatcher.Exists(System.Int32)">
            <summary> Returns true if the supplied command ID is valid. </summary>
        </member>
        <member name="M:MassiveNet.CommandDispatcher.ParamTypes(System.Int32)">
            <summary> Returns a list of parameters types for the given command ID. </summary>
        </member>
        <member name="T:MassiveNet.NetChannelReliable">
            <summary>
            Functionality and state for sending and receiving reliable, ordered messages.
            Handles acking, stream processing, send window, ordered receive buffer, etc.
            </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.SerializeReliableMessage(MassiveNet.NetMessage)">
            <summary> 
            Serializes a NetMessage to the reliable stream.
            If there is no current stream, one is prepared.
            If the current stream cannot fit the message, it is sent and a new stream is prepared.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MassiveNet.NetChannelReliable.WriteHeader" -->
        <member name="M:MassiveNet.NetChannelReliable.RouteIncomingStream(MassiveNet.NetStream)">
            <summary> Handles a stream based on its header/size. Determines if it should be buffered if out-of-order,
            acked and released if size is equal to header size (ack only), or delivered immediately. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.DeliverStream(MassiveNet.NetStream)">
            <summary> Deserializes incoming reliable stream into NetMessages, forwards them to the NetSocket, releases the stream,
            increments the remote sequence, and retries the out-of-order buffer when needed. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.RemoteSequenceValid(System.Int32)">
            <summary> Returns true if the remote sequence distance is valid. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.BufferOutOfOrder(System.Int32,MassiveNet.NetStream,MassiveNet.NetChannelReliable.NetHeader)">
            <summary> Adds an out-of-order datagram to the buffer to await future delivery. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.DecrementReceiveBuffer">
            <summary>
            When an in-order datagram arrives and there are out-of-order datagrams
            in the buffer, this method updates their sequence distance. If a datagram is now
            ready to be delivered (seqDist = 1), or ready to be acknowledged (seqDist = 63),
            this method will handle it.
            </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.RetryOutOfOrder(System.Int32)">
            <summary> Removes a datagram from the buffer and retries delivery. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.AckReceived(MassiveNet.NetChannelReliable.NetHeader)">
            <summary> Acknowledges and updates the remote sequence. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.AckDelivered(MassiveNet.NetChannelReliable.NetHeader)">
            <summary> Detects acknowledged and lost messages. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.CheckTimeouts(System.UInt32)">
            <summary> Checks all sent and unacked messages for timeout. Messages exceeding timeout are considered lost. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.IsAcked(System.UInt64,System.Int32)">
            <summary> Uses the seqDistance as a flag on ackHistory for delivery. True if present. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.MessageLost(System.Int32)">
            <summary> Resends a lost message, updates its sent time, and increments the Resends stat. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelReliable.MessageDelivered(System.Int32,MassiveNet.NetChannelReliable.NetHeader)">
            <summary> Removes acked messages from the send window, releases the stream, updates connection ping, and 
            increments the Delivered stat. </summary>
        </member>
        <member name="T:MassiveNet.NetConnection">
            <summary>
            NetConnection maintains high-level connection functionality such as group membership, scope, and view ownership.
            </summary>
        </member>
        <member name="F:MassiveNet.NetConnection.Socket">
            <summary> The socket that created this connection. </summary>
        </member>
        <member name="F:MassiveNet.NetConnection.Endpoint">
            <summary> The endpoint that this connection represents. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.UpdatePing(System.UInt32,System.UInt32,System.UInt32)">
            <summary> When a reliable header is processed, ping is updated with 1/10 sample. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MassiveNet.NetConnection.EndOfFrame(System.UInt32)" -->
        <member name="M:MassiveNet.NetConnection.ShouldSendHeartbeat(System.UInt32)">
            <summary> Returns true if it has been more than 1 second since last sent message. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.ShouldDisconnect(System.UInt32)">
            <summary> Returns true if the reliable send window is full or connection timeout. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.Disconnect">
            <summary> Disconnects this NetConnection and performs cleanup. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.ReceiveStream(MassiveNet.NetStream)">
            <summary> Updates receive time and forwards stream to proper channel for deserialization. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.Send(MassiveNet.NetMessage)">
            <summary> Sends a message to this connection. </summary>
        </member>
        <member name="F:MassiveNet.NetConnection.InternalScope">
            <summary> When a connection does not have a View yet needs a calculated scope, this can be used. </summary>
        </member>
        <member name="F:MassiveNet.NetConnection.Authorizations">
            <summary> The list of ViewIDs for NetViews that this connection is authorized to communicate with. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.Authorized(System.Int32)">
            <summary> Returns true if this connection has control over the NetView associated with the provided ViewID. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.AddAuthorization(System.Int32)">
            <summary> Adds the supplied ViewID to the controller list for this connection. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.RemoveAuthorization(System.Int32)">
            <summary> Removes the supplied ViewID from the controller list for this connection. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.ResetAuthorizations">
            <summary> Clears the authorization list for this connection. </summary>
        </member>
        <member name="F:MassiveNet.NetConnection.groups">
            <summary> The list of groups this connection is a member of. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.InGroup(System.Int32)">
            <summary> Returns true if this connection is a member of the supplied group. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.AddToGroup(System.Int32)">
            <summary> Adds this connection to the group associated with the supplied GroupID. </summary>
        </member>
        <member name="M:MassiveNet.NetConnection.RemoveFromGroup(System.Int32)">
            <summary> Removes this connection from the group associated with the supplied GroupID. </summary>
        </member>
        <member name="P:MassiveNet.NetConnection.IsServer">
            <summary> Returns false if this is an incoming connection. </summary>
        </member>
        <member name="P:MassiveNet.NetConnection.IsPeer">
            <summary> PeerApproval is true if NetSocket.Events.OnPeerApproval returns true for this connection. </summary>
        </member>
        <member name="P:MassiveNet.NetConnection.Address">
            <summary> Returns the string form of this connection's IP address, e.g.: "192.168.1.1" </summary>
        </member>
        <member name="P:MassiveNet.NetConnection.Port">
            <summary> Returns the int form of this conenction's port, e.g.: 17010  </summary>
        </member>
        <member name="P:MassiveNet.NetConnection.Ping">
            <summary> The approximate ping (in milliseconds) for the connection. </summary>
        </member>
        <member name="P:MassiveNet.NetConnection.View">
            <summary> Convenient way of storying and retrieving a connection's primary View, if any. </summary>
        </member>
        <member name="P:MassiveNet.NetConnection.HasView">
            <summary> Returns true if this connection has a View assigned as a primary. </summary>
        </member>
        <member name="P:MassiveNet.NetConnection.Scope">
            <summary> If connection has a View assigned, returns the scope for the View. </summary>
        </member>
        <member name="T:MassiveNet.NetMessage">
            <summary> Stores message options and data. </summary>
        </member>
        <member name="F:MassiveNet.NetMessage.MessageId">
            <summary> Identifies the targeted RPC. </summary>
        </member>
        <member name="F:MassiveNet.NetMessage.ViewId">
            <summary> Identifies the targeted Command or View. </summary>
        </member>
        <member name="F:MassiveNet.NetMessage.Parameters">
            <summary> Message parameters. </summary>
        </member>
        <member name="P:MassiveNet.NetMessage.Reliable">
            <summary> Returns true if Options has Reliable set. </summary>
        </member>
        <member name="T:MassiveNet.NetRequest`1">
            <summary>
            Represents a request sent over the network, a coroutine for waiting on said request, and
            the result (if successful).
            </summary>
        </member>
        <member name="T:MassiveNet.Request`1">
            <summary>
            The base request class for representing coroutine/async functionality that yields a result.
            </summary>
        </member>
        <member name="T:MassiveNet.NetSerializer">
            <summary>
            NetSerializer handles (de)serialization of custom types, registration of custom type (de)serialization methods,
            MassiveNet type serialization methods, and "object" type serialization routing methods.
            </summary>
        </member>
        <member name="T:MassiveNet.NetSocketEvents">
            <summary>
            Contains NetSocket events, their backing delegates, and methods which null-check and call events.
            </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnSocketStart">
            <summary> Fired after socket startup is complete. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnFailedToConnect">
            <summary> Fired when failed to connect to an endpoint; Provides the EndPoint. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnClientApproval">
            <summary> An incoming client connection has an endpoint and a stream of data.
            If true is returned, the client is approved and a connection is created. False
            will send a deny to the client. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnPeerApproval">
            <summary> This is fired after approval but before a connection is created. 
            Using the supplied endpoint and stream, return true if the connection should be
            considered a peer, false if it is not a peer. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnClientConnected">
            <summary> Fired after an incoming connection is created. Provides the connection. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnClientDisconnected">
            <summary> Fired after a client connection is removed from the connections list. Provides
            the connection. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnConnectedToServer">
            <summary> Fired after an outgoing connection is created. Provides the connection.  </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnDisconnectedFromServer">
            <summary> Fired after a server connection is removed from the connections list. Provides
            the connection. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnWritePeerApproval">
            <summary> Triggered after ConnectToPeer, any data that is used by the receiving end to determine
            if we are a legit peer should be written to stream. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnWriteApproval">
            <summary> Triggered after Connect, any data that is used by the receiving end to determine
            if we are a legit client should be written to stream. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnPeerConnected">
            <summary> Fired after a peer connection is created. Provides the connection.
            This will fire after OnClientConnected or OnConnectedToServer. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnPeerDisconnected">
            <summary> Fired after a peer connection is removed from the connections list. Provides
            the connection. This will fire after OnClientDisconnected or OnDisconnectedFromServer. </summary>
        </member>
        <member name="E:MassiveNet.NetSocketEvents.OnMessageReceived">
            <summary> Fired after a message is received. Provies the message and connection it came from. </summary>
        </member>
        <member name="T:MassiveNet.NetZoneClient">
            <summary>
            Provides facilities for clients to perform necessary setup in a Zone-configured environment.
            Listens for commands to connect to other Zones and signals successful connections or failures.
            </summary>
        </member>
        <member name="E:MassiveNet.NetZoneClient.OnZoneSetupSuccess">
            <summary> Called when succesfully connected to all required endpoints. </summary>
        </member>
        <member name="E:MassiveNet.NetZoneClient.OnZoneSetupFailed">
            <summary> Called if failed to connect to a required endpoint. </summary>
        </member>
        <member name="F:MassiveNet.RequestDispatcher.requests">
            <summary> Request ID -> NetRequest instance lookup. When receiving a response to a NetRequest, it is directed using this. </summary>
        </member>
        <member name="M:MassiveNet.RequestDispatcher.CreateKey(System.UInt32,System.UInt16)">
            <summary> Generates the key to be used for the request dictionary lookup. </summary>
        </member>
        <member name="M:MassiveNet.RequestDispatcher.Exists(System.UInt32,System.UInt16)">
            <summary> Returns true if there is an active request matching the supplied ViewID and RequestID. </summary>
        </member>
        <member name="M:MassiveNet.RequestDispatcher.SetResponse(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary>
            Sets request result and removes request from queue.
            </summary>
        </member>
        <member name="M:MassiveNet.RequestDispatcher.Type(System.UInt32,System.UInt16)">
            <summary> Returns the type for the request. The type is needed for deserialization purposes. </summary>
        </member>
        <member name="M:MassiveNet.RequestDispatcher.Remove(System.UInt32,System.UInt16)">
            <summary> Removes the request from the active requests list. </summary>
        </member>
        <member name="T:MassiveNet.NetRPCAttribute">
            <summary>
            NetRPC is an attribute used to identify methods which should be cached and targeted for incoming RPCs.
            </summary>
        </member>
        <member name="T:MassiveNet.RpcDispatcher">
            <summary>
            Tracks numeric ids for RPC method names and invokes incoming RPC messages.
            </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.Invoke(System.Object,System.String,MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Invokes RPC with parameters from the NetMessage. </summary>
        </member>
        <member name="F:MassiveNet.RpcDispatcher.idToName">
            <summary> The protocol authority (server) generates network friendly IDs for RPCs, which we store here: </summary>
        </member>
        <member name="F:MassiveNet.RpcDispatcher.nameToId">
            <summary> Remote RPC identifiers. The string name of the RPC is converted to a numeric ID for header use: </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.TakesRequests(System.UInt16)">
            <summary> Returns true if the RPC method has a return value or has a NetRequest parameter. </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.Exists(System.UInt16)">
            <summary> Returns true if the provided rpcID is associated with a method. </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.ReceiveAssignmentRequest(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Processes a request to assign an RPC method name to a numeric ID. </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.AssignRemoteRpc(System.String)">
            <summary> Assigns a network-friendly numeric ID for a remote method. </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.ReceiveAssignmentResponse(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Processes a response to an RPC assignment request. The assigned id and method name are added to the LocalRpcs dictionary. </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.ReceiveRemoteAssignment(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Adds the assigned id and remote method name to the RemoteRpcIds dictionary. </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.SendLocalAssignments(MassiveNet.NetConnection)">
            <summary> Sends a message for each RPC method names and IDs to the supplied connection. </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.AssignLocalRpcs">
            <summary> Called by the server to generate IDs for local RPCs. </summary>
        </member>
        <member name="M:MassiveNet.RpcDispatcher.RequestAssignments(MassiveNet.NetConnection)">
            <summary> Sends a request to the server for each local RPC method name that needs an ID assignment. </summary>
        </member>
        <member name="T:MassiveNet.NetChannelUnreliable">
            <summary> Handles (de)serialization of sent and received unreliable messages. </summary>
        </member>
        <member name="M:MassiveNet.NetChannelUnreliable.WriteUnreliableHeader">
            <summary> Writes a zero-bit to signify the lack of a reliable header. </summary>
        </member>
        <member name="T:MassiveNet.Cmd">
            <summary>
            Commands are non-attribute, non-reflection/invoke based RPCs that must be
            manually registered. They do not target specific NetViews.
            The CommandID (enum ushort value) is used as the messageId.
            Useable Range: 1801-2047
            </summary>
        </member>
        <member name="F:MassiveNet.Cmd.RemoteAssignment">
            <summary> Sent by server to new connection with server's RPC names and the assigned RPC IDs. </summary>
        </member>
        <member name="F:MassiveNet.Cmd.AssignmentRequest">
            <summary> Sent by client to server upon connecting, requesting a numeric RPC ID for the supplied RPC method name. </summary>
        </member>
        <member name="F:MassiveNet.Cmd.AssignmentResponse">
            <summary> Sent by server to new client connection in response to an AssignmentRequest. The response contains the RPC ID assignment and the method name. </summary>
        </member>
        <member name="F:MassiveNet.Cmd.ConnectionRequirements">
            <summary> Sends requirements for finishing connection setup. </summary>
        </member>
        <member name="F:MassiveNet.Cmd.RequirementsMet">
            <summary> Signals that requirements for finishing connection setup have been met. </summary>
        </member>
        <member name="F:MassiveNet.Cmd.RequestResponse">
            <summary> Command containing the response to a request. </summary>
        </member>
        <member name="F:MassiveNet.NetSocket.Connections">
            <summary> All active connections. Includes both client and server connections. </summary>
        </member>
        <member name="F:MassiveNet.NetSocket.Self">
            <summary> Dummy NetConnection used to represent self for authority checks. </summary>
        </member>
        <member name="F:MassiveNet.NetSocket.Events">
            <summary> Contains all events related to this socket. </summary>
        </member>
        <member name="F:MassiveNet.NetSocket.rpcObjectInstances">
            <summary> Monobehaviour instances for viewless-RPC methods. The key is the method name and the value is the Monobehaviour instance. </summary>
        </member>
        <member name="F:MassiveNet.NetSocket.ProtocolAuthority">
            <summary> If true, all incoming connections will have their RPC IDs generated by this socket. If false,
            this socket will need to first connect to a protocol authority. </summary>
        </member>
        <member name="F:MassiveNet.NetSocket.TargetFrameRate">
            <summary> Sets Unity's Application.targetFrameRate. It is recommended to set this to a resonable
            number such as 60 so that timing-related functionality remains more consistent. </summary>
        </member>
        <member name="F:MassiveNet.NetSocket.socket">
            <summary> Handle to OS-level socket, created on successful StartSocket. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.Awake">
            <summary> Awake is a Unity convention. Unity invokes this method first when instantiated. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.StartSocket">
            <summary> Starts the socket using an automatically selected endpoint. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.StartSocket(System.String)">
            <summary>
            Starts the socket using an address in the following format: "192.168.1.1:17010"
            If the port is taken, the given port will be incremented to a free port.
            </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.StartSocket(System.Net.IPEndPoint)">
            <summary>
            Starts the socket using the supplied endpoint.
            If the port is taken, the given port will be incremented to a free port.
            </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.Shutdown">
            <summary> Closes the socket and performs cleanup for active connections. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.Connect(System.String)">
            <summary> Attempts to connect to a server with address format: "192.168.1.1:17001" </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.ConnectToPeer(System.String)">
            <summary> Attempts to connect to a peer with address format: "192.168.1.1:17001" </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.Connect(System.Net.IPEndPoint)">
            <summary> Attempts to connect to a server located at the supplied endpoint. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.ConnectToPeer(System.Net.IPEndPoint)">
            <summary> Attempts to connect to a peer located at the supplied endpoint. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.ConnectingTo(System.Net.IPEndPoint)">
            <summary> Returns true if socket is currently attempting a connection with supplied endpoint. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.Connect(System.Net.IPEndPoint,MassiveNet.NetStream)">
            <summary> Handles connecting status. Tracks attempted connections and (re)sends connection data. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.RemoveFromConnecting(System.Net.IPEndPoint,System.Boolean)">
            <summary> Cleans up a connection attempt and returns true if it is a peer connection. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.StringToEndPoint(System.String)">
            <summary> Creates an IPEndPoint by parsing a string with format "192.168.1.1:17010" </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.DisconnectAll">
            <summary> Closes all connections. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.Disconnect(MassiveNet.NetConnection)">
            <summary> Closes the supplied connection. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.CanReceive">
            <summary> Returns true if OS socket has data available for read. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.TryReceive(System.Byte[],System.Int32,System.Int32@,System.Net.IPEndPoint@)">
            <summary> The starting point for incoming data. Attempts to read from OS socket buffer. False = failed. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.TrySend(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary> Final frontier for outgoing data. Attempts to send data to endpoint via OS socket. False = failed. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.ReceiveAll">
            <summary> Receives data until CanReceive is no longer true (receive buffer empty). </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.CheckForTimeouts">
            <summary> Iterates through pending connections and retries any timeouts. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.EndFrameTasks">
            <summary> Timeouts, disconnects, heartbeats, forced-acks, etc. need to be performed at end of frame. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.CreateConnection(System.Net.IPEndPoint,System.Boolean,System.Boolean)">
            <summary> Adds a new NetConnection to the connection list. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.Send(System.String,MassiveNet.NetConnection,System.Object[])">
            <summary> Sends a reliable RPC that does not target a specific view. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.SendRequest``1(System.String,MassiveNet.NetConnection,System.Object[])">
            <summary> Sends a request to the target connection without an associated view. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.ReceiveMessage(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Dispatches received commands and RPCs based on the messageID. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.DispatchRpc(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary>
            Passes parameters from an incoming network message to the method associated with the RPC.
            </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.SendConnectionRequirements(MassiveNet.NetConnection)">
            <summary> Sends connection configuration requirements command to a new client connection. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.ReceiveConnectionRequirements(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Handles connection configuration requirements sent by server upon connection. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.SendRequirementsMet(MassiveNet.NetConnection)">
            <summary> Sends command to server to signal that connection requirements have been met. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.ReceiveRequirementsMet(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Handles RequirementsMet command sent by client to signal the client is ready. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.RegisterCommandParams">
            <summary> Populates CommandParameterTypes with the type data for each command.
             This is necessary to allow proper deserialization of incoming data for these commands. </summary>
        </member>
        <member name="M:MassiveNet.NetSocket.RegisterRpcListener(UnityEngine.MonoBehaviour)">
            <summary> Registers an instance of a MonoBehaviour to receive RPCs not associated with a NetView. </summary>
        </member>
        <member name="P:MassiveNet.NetSocket.Port">
            <summary> Returns the port number for this socket. 0 if socket not yet initialized. </summary>
        </member>
        <member name="P:MassiveNet.NetSocket.Address">
            <summary> Returns the IP address and port this socket is listening on. E.g., "192.168.1.1:17603" </summary>
        </member>
        <member name="P:MassiveNet.NetSocket.ConnectionCount">
            <summary> The current number of total connections. Includes clients, servers, and peers.
            Compared against MaxConnections to determine if incoming connections should be refused. </summary>
        </member>
        <member name="P:MassiveNet.NetSocket.MaxConnections">
            <summary> If ConnectionCount == MaxConnections, incoming connections will be refused. Outgoing connections
            are counted in ConnectionCount, but are allowed to exceed MaxConnections. </summary>
        </member>
        <member name="P:MassiveNet.NetSocket.AcceptConnections">
            <summary> All incoming connections are refused when set to false. Clients should be false. </summary>
        </member>
        <member name="T:MassiveNet.NetSocket.ByteCmd">
            <summary> Byte values for connection control commands. </summary>
        </member>
        <member name="F:MassiveNet.NetStream.HalfFloats">
            <summary>
            When true, all floats written will use half precision. This value must be the same for client and server. 
            </summary>
        </member>
        <member name="M:MassiveNet.NetStream.Create">
            <summary> Creates a new NetStream, recycling from the pool when possible. </summary>
        </member>
        <member name="M:MassiveNet.NetStream.New">
            <summary> Creates a new NetStream, recycling from the pool when possible. </summary>
        </member>
        <member name="M:MassiveNet.NetStream.Release">
            <summary> Releases a stream back to the pool for reuse. This should be called once a stream is no longer needed. </summary>
        </member>
        <member name="P:MassiveNet.NetStream.Size">
            <summary> The current size of the stream (in bits). </summary>
        </member>
        <member name="P:MassiveNet.NetStream.Position">
            <summary> There current read/write position of the stream (in bits). </summary>
        </member>
        <member name="T:MassiveNet.NetTime">
            <summary>
            NetTime provides 
            </summary>
        </member>
        <member name="M:MassiveNet.NetTime.Milliseconds">
            <summary>
            High-precision time represented as elapsed milliseconds.
            </summary>
        </member>
        <member name="M:MassiveNet.NetTime.Seconds">
            <summary>
            High-precision time represented as elapsed seconds.
            </summary>
        </member>
        <member name="M:MassiveNet.NetTime.ElapsedMilliseconds(System.UInt32)">
            <summary>
            Returns the difference (in milliseconds) between the supplied time and current time.
            </summary>
        </member>
        <member name="M:MassiveNet.NetTime.ElapsedSeconds(System.UInt32)">
            <summary>
            Returns the difference (in seconds) between the supplied time and current time.
            </summary>
        </member>
        <member name="M:MassiveNet.NetTime.StartDateTime">
            <summary>
            Returns the DateTime representing the socket start time. The time is not precise.
            </summary>
        </member>
        <member name="M:MassiveNet.NetTime.CurrentDateTime">
            <summary>
            Returns a new DateTime representing the current local time. The time is not precise and creates garbage.
            Only useful for pretty printing the time (e.g., console output, logging).
            </summary>
        </member>
        <member name="T:MassiveNet.NetView">
            <summary>
            NetView is a core component that should be added to any Unity prefab that is used for a network object.
            It is responsible for handling RPCs and synchronization for a particular NetView.
            A NetView is identified across the network via a ViewID.
            </summary>
        </member>
        <member name="F:MassiveNet.NetView.Controllers">
            <summary> The connections that are authorized to send
             RPCs to this NetView. The server uses this to determine which RPCs to allow from where. </summary>
        </member>
        <member name="F:MassiveNet.NetView.CachedRpcObjects">
            <summary> This is the cache for object instances for RPC methods. The key is the method name and the value is the Monobehavior instance. </summary>
        </member>
        <member name="F:MassiveNet.NetView.syncStream">
            <summary> Instead of creating a new NetStream for each sync event, it's cached here for performance. </summary>
        </member>
        <member name="F:MassiveNet.NetView.syncMessage">
            <summary> Instead of creating a new NetMessage for each sync event, it's cached here for performance. </summary>
        </member>
        <member name="M:MassiveNet.NetView.AddController(MassiveNet.NetConnection)">
            <summary> Adds the provided connection to the controller list, allowing connection to send RPCs to this view. </summary>
        </member>
        <member name="M:MassiveNet.NetView.IsController(MassiveNet.NetConnection)">
            <summary> Returns true if the supplied connection is in the controllers list. </summary>
        </member>
        <member name="M:MassiveNet.NetView.DispatchRpc(System.String,MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary>
            When an RPC is received, the targeted NetView is identified and DispatchRPC is called for that
            particular NetView object. DispatchRPC then identifies the targeted method and invokes it with
            the supplied parameters.
            </summary>
        </member>
        <member name="M:MassiveNet.NetView.SetRpcCache(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Assigns the generated lookup of RPC method names and the MonoBehaviour instance that contains the method.
            </summary>
        </member>
        <member name="M:MassiveNet.NetView.SendReliable(System.String,MassiveNet.RpcTarget,System.Object[])">
            <summary>
            Sends a reliable RPC. This should be used for infrequent messages which require guaranteed delivery.
            Reliable should never be used for state-sync due to the increased bandwidth, garbage, and CPU overhead.
            </summary>
            <param name="methodName"> The name of the RPC method. </param>
            <param name="target"> Who to send the RPC to. For a client, this should always be Server. </param>
            <param name="parameters">The parameters to send.</param>
        </member>
        <member name="M:MassiveNet.NetView.SendReliable(System.String,MassiveNet.NetConnection,System.Object[])">
            <summary>
            Sends a reliable RPC. This should be used for infrequent messages which require guaranteed delivery.
            Reliable should never be used for state-sync due to the increased bandwidth, garbage, and CPU overhead.
            </summary>
            <param name="methodName"> The name of the RPC method. </param>
            <param name="target"> The NetConnection to send the RPC to. </param>
            <param name="parameters">The parameters to send.</param>
        </member>
        <member name="M:MassiveNet.NetView.SendReliable(System.String,System.Collections.Generic.List{MassiveNet.NetConnection},System.Object[])">
            <summary>
            Sends a reliable RPC. This should be used for infrequent messages which require guaranteed delivery.
            Reliable should never be used for state-sync due to the increased bandwidth, garbage, and CPU overhead.
            </summary>
            <param name="methodName"> The name of the RPC method. </param>
            <param name="targets"> The NetConnections to send the RPC to. </param>
            <param name="parameters">The parameters to send.</param>
        </member>
        <member name="M:MassiveNet.NetView.SendRequest``1(System.String,MassiveNet.RpcTarget,System.Object[])">
            <summary>
            Sends a reliable RPC and awaits a response. NetRequests are useful for getting a return value from a RPC.
            Requests should not be used for very frequent messages such as state-sync due to overhead.
            </summary>
            <param name="methodName"> The name of the RPC method associated with the request. </param>
            <param name="target"> Who to send the request to. Requests should only be sent to a single target. </param>
            <param name="parameters">The parameters to send for the request.</param>
        </member>
        <member name="M:MassiveNet.NetView.SendUnreliable(System.String,MassiveNet.RpcTarget,System.Object[])">
            <summary>
            Sends an unreliable RPC. This should be used for more frequent messages that don't require reliability.
            </summary>
            <param name="methodName"> The name of the RPC method. </param>
            <param name="target">Who to send the RPC to. For a client, this should always be Server.</param>
            <param name="parameters">The parameters to send.</param>
        </member>
        <member name="M:MassiveNet.NetView.SendSync(MassiveNet.RpcTarget)">
            <summary>
            Sends the NetStream to the RPC at the supplied target.
            </summary>
            <param name="target"> Who to send the RPC to. For a client, this should always be Server. </param>
        </member>
        <member name="M:MassiveNet.NetView.TriggerSyncEvent">
            <summary> Fires sync event to trigger sync messsage creation. </summary>
        </member>
        <member name="P:MassiveNet.NetView.Id">
            <summary> Server-assigned unique network identifier for this view. </summary>
        </member>
        <member name="P:MassiveNet.NetView.Group">
            <summary> The group number that this NetView belongs to. Only connections that are in this group will receive communications for this NetView. </summary>
        </member>
        <member name="P:MassiveNet.NetView.AmServer">
            <summary> Returns true if we are the server for this View. </summary>
        </member>
        <member name="P:MassiveNet.NetView.Server">
            <summary> The server that is currently responsible for the view. This is initially the server that created the NetView, but can change in handoff. </summary>
        </member>
        <member name="P:MassiveNet.NetView.CurrentRelation">
            <summary>
            What type of relationship we have to this NetView.
            </summary>
        </member>
        <member name="P:MassiveNet.NetView.PrefabRoot">
            <summary>
            The root name of the prefab for this View. The root name is everything before the @ suffix.
            </summary>
        </member>
        <member name="E:MassiveNet.NetView.OnReadSync">
            <summary> When a sync stream is received, OnReadSync provides the NetStream which contains the sync data. </summary>
        </member>
        <member name="E:MassiveNet.NetView.OnWriteSync">
            <summary> OnWriteSync signals the sync event. Any RPC sent during sync will be batched and sent unreliably. </summary>
        </member>
        <member name="E:MassiveNet.NetView.OnReadInstantiateData">
            <summary> Provides the NetStream that contains instantiation data (if any). </summary>
        </member>
        <member name="E:MassiveNet.NetView.OnWriteProxyData">
            <summary> All data necessary to replicate this View's state for a proxy should be written to the stream. </summary>
        </member>
        <member name="E:MassiveNet.NetView.OnWriteOwnerData">
            <summary> All data necessary to replicate this View's state for the owner should be written to the stream. </summary>
        </member>
        <member name="E:MassiveNet.NetView.OnWriteCreatorData">
            <summary> All data necessary to fully replicate this View's state should be written to the stream. </summary>
        </member>
        <member name="E:MassiveNet.NetView.OnWritePeerData">
            <summary> All data necessary to replicate this View's state for a peer should be written to the stream. </summary>
        </member>
        <member name="P:MassiveNet.NetView.Scope">
            <summary> The scope config determines how this View is treated during scope calculations. </summary>
        </member>
        <member name="T:MassiveNet.NetView.Relation">
            <summary>
            The different types of relationship for a NetView and a NetConnection.
            </summary>
        </member>
        <member name="T:MassiveNet.NetScope">
            <summary>
            Maintains state and configuration for scope calculation, as well as events for when this particular
            scope goes in/out of scope for the connection associated with this socket.
            </summary>
        </member>
        <member name="F:MassiveNet.NetScope.levels">
            <summary> ViewId/Scope network level of detail (LOD) lookup for each in-scope view. 1=Every, 2=Every other, 3=Every fourth sync. </summary>
        </member>
        <member name="F:MassiveNet.NetScope.TakePrecedence">
            <summary> When true, this scope overrides values used for scope calculation. That is, when another scope is being checked against
            this scope, if normally the other scope's values would be used, this scope's values will be used instead. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.DisableScopeCalculation">
            <summary> On next scope calculation, will set to out-of-scope for all. Will not
            participate in future scope calculations unless re-enabled. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.EnableScopeCalculation">
            <summary> Resumes scope calculation for this scope. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.FireOutEvent">
            <summary> Fires OnOut when this view has been set as out of scope. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.FireInEvent">
            <summary> Fires OnIn when this view has been set as in scope. </summary>
        </member>
        <member name="F:MassiveNet.NetScope.trans">
            <summary> When set, this transform will be used for scope calculation instead of the base transform. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.In(System.Int32)">
            <summary> Returns true if the supplied ViewID is in-scope. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.In(System.Int32,System.Int32)">
            <summary> Returns true if the supplied ViewID is in-scope at the provided scope level. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.Level(System.Int32)">
            <summary> Returns the 0-3 value scope level for the supplied viewId. 0 = not in-scope. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.SetOut(System.Int32)">
            <summary> Sets a NetView as out-of-scope. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.SetIn(System.Int32,System.Int32)">
            <summary> Sets a NetView as in-scope. </summary>
        </member>
        <member name="M:MassiveNet.NetScope.SetIn(System.Int32)">
            <summary> Sets a NetView as in-scope with the default scope level of 1. </summary>
        </member>
        <member name="P:MassiveNet.NetScope.InScopeDist">
            <summary> How close a connection must be to the NetView for the connection to be set in-scope for the NetView. </summary>
        </member>
        <member name="P:MassiveNet.NetScope.OutScopeDist">
            <summary> How far away a connection must be to a NetView for the connection to be set out-of-scope for the NetView. </summary>
        </member>
        <member name="P:MassiveNet.NetScope.LevelOne">
            <summary> If within this distance, scope level will be set to one (the most frequent sync rate).
            Anything beyond this range will be set to either scope level two or three. </summary>
        </member>
        <member name="P:MassiveNet.NetScope.LevelTwo">
            <summary> If within this distance, scope level will be set to two (the middle frequency sync rate).
             Anything beyond this range will be set to scope level three.</summary>
        </member>
        <member name="E:MassiveNet.NetScope.OnOut">
            <summary> Signals that this Scope has gone out of scope for us. </summary>
        </member>
        <member name="E:MassiveNet.NetScope.OnIn">
            <summary> Signals that this Scope has come back into scope for us. </summary>
        </member>
        <member name="P:MassiveNet.NetScope.Position">
            <summary> Gets the position that should be used for distance-based scope calculation. </summary>
        </member>
        <member name="P:MassiveNet.NetScope.Trans">
            <summary> Gets/sets the transform that is used for distance-based scope calculation. </summary>
        </member>
        <member name="P:MassiveNet.NetScope.HasPosition">
            <summary> Returns true if has a non-zero position. </summary>
        </member>
        <member name="T:MassiveNet.NetScopeManager">
            <summary>
            Contains various implementations for scope calculation.
            </summary>
        </member>
        <member name="M:MassiveNet.NetScopeManager.IncrementalScopeUpdate">
            <summary> Updates scope for a limited slice of Views. Every connection with a scope is
            updated for the current slice. Slice position is maintained between invocations. Typically
            this is called every frame and is designed to spread the overhead of scope calculation across
            all frames for consistent performance. </summary>
        </member>
        <member name="M:MassiveNet.NetScopeManager.FullScopeCalculation(MassiveNet.NetConnection)">
            <summary> Calculates the scope for the supplied connection against the scope of every view.
            This is useful, for example, when a connection is first created and an immediate population
            of views is desired. This can be detrimental when there is so much instantiation data that
            sending it all at once would cause an immediate send window overflow. </summary>
        </member>
        <member name="M:MassiveNet.NetScopeManager.FullScopeCalculation(MassiveNet.NetView)">
            <summary> Calculates scope for every connection against the provided view's scope.
            This is useful, for example, when creating a new view so that it can be immediately
            instantiated since a delay may be undesireable. </summary>
        </member>
        <member name="M:MassiveNet.NetScopeManager.UpdateScopeRange(MassiveNet.NetConnection,System.Collections.Generic.List{MassiveNet.NetView})">
            <summary> Working with a given connection, a List of all views, SliceSize and Position,
            the connection has its scope updated for the given position/slice of the provided list
            of views. If views.Count == 512, Position == 64, and slice size == 32, connection will
            have scope updated for views occupying index 64 through 96 of the views List only. </summary>
        </member>
        <member name="M:MassiveNet.NetScopeManager.UpdateScope(MassiveNet.NetScope,MassiveNet.NetView)">
            <summary> The provided scope is updated if the provided view has gone in or out of scope.
            False is returned if there is no change. </summary>
        </member>
        <member name="M:MassiveNet.HalfConverter.GenerateToFloat">
            <summary> Populates tables for half to float conversion lookups. </summary>
        </member>
        <member name="M:MassiveNet.HalfConverter.GenerateToHalf">
            <summary> Populates tables for float to half conversion. </summary>
        </member>
        <member name="F:MassiveNet.RpcTarget.All">
            <summary> Send an RPC to all connections, even if they are controllers. </summary>
        </member>
        <member name="F:MassiveNet.RpcTarget.AllInclOutOfScope">
            <summary> Send an RPC to all connections in the group, even if currently not in-scope. </summary>
        </member>
        <member name="F:MassiveNet.RpcTarget.Controllers">
            <summary> Send an RPC only to the controllers of this NetView. </summary>
        </member>
        <member name="F:MassiveNet.RpcTarget.NonControllers">
            <summary> Send an RPC to all in-scope connections except for the controllers of this NetView. </summary>
        </member>
        <member name="F:MassiveNet.RpcTarget.Server">
            <summary> Send an RPC to the server of this netview. </summary>
        </member>
        <member name="F:MassiveNet.ViewCmd.CreateProxyView">
            <summary> Instantiation command to a connection that is not the owner of the new NetView. </summary>
        </member>
        <member name="F:MassiveNet.ViewCmd.CreateOwnerView">
            <summary> Sender provides data for to create a new NetView with receiver as owner. </summary>
        </member>
        <member name="F:MassiveNet.ViewCmd.DestroyView">
            <summary> Destroy the object associated with the NetViewID. </summary>
        </member>
        <member name="F:MassiveNet.ViewCmd.ChangeServer">
            <summary> View server has changed for supplied view ID. Sender of command is new server. </summary>
        </member>
        <member name="F:MassiveNet.ViewCmd.OutOfScope">
            <summary> Sender tells client that the View has gone out of scope for them. </summary>
        </member>
        <member name="F:MassiveNet.ViewCmd.Sync">
            <summary> Sender provides stream for state synchronization. </summary>
        </member>
        <member name="T:MassiveNet.NetViewManager">
            <summary>
            Handles creation, destruction, synchronization, and messaging for NetViews.
            </summary>
        </member>
        <member name="F:MassiveNet.NetViewManager.ViewIdMin">
            <summary> The starting value for generating ViewIDs. </summary>
        </member>
        <member name="F:MassiveNet.NetViewManager.ViewIdMax">
            <summary> The maximum value for generating ViewIDs. </summary>
        </member>
        <member name="F:MassiveNet.NetViewManager.SyncsPerSecond">
            <summary> How often Views should be synchronized across the network. </summary>
        </member>
        <member name="F:MassiveNet.NetViewManager.IncrementalSync">
            <summary> Incremental sync is designed to spread sync load across each frame. Since it is
            dependent on framerate and only beneficial when number of owned views is high, this should
            be set to false for clients. </summary>
        </member>
        <member name="F:MassiveNet.NetViewManager.GenerateViewId">
            <summary> Delegate for generating a new ViewID. </summary>
        </member>
        <member name="F:MassiveNet.NetViewManager.InstantiatePrefab">
            <summary> Delegate for instantiating a prefab. This is especially useful for pooling prefabs. </summary>
        </member>
        <member name="F:MassiveNet.NetViewManager.DestroyViewObject">
            <summary> Delegate for destroying a NetView. Useful for returning to a pool. </summary>
        </member>
        <member name="F:MassiveNet.NetViewManager.ViewLookup">
            <summary> NetView lookup by ViewID. </summary> 
        </member>
        <member name="M:MassiveNet.NetViewManager.ReceiveOutOfScope(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Handles the OutOfScope command by triggering the OnOutOfScope delegate for the view. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.SendChangeViewServer(System.Int32)">
            <summary> Sends a command to all controllers of the View that we are the new Server. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.ReceiveChangeServer(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Handles the ChangeServer command by changing the View's Server to that of the sender. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.RegisterNetView(MassiveNet.NetView)">
            <summary> Post-instantiation configuration of NetView. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.DestroyViewsServing(MassiveNet.NetConnection)">
            <summary> Destroys all Views being served by the supplied connection. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.DestroyAuthorizedViews(MassiveNet.NetConnection)">
            <summary> Destroys all Views that the supplied connection is authorized for. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.Send(MassiveNet.NetView,MassiveNet.NetMessage,MassiveNet.RpcTarget)">
            <summary> Sends an RPC to connections that are in-scope for the provided view. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.Send(System.Int32,System.Boolean,System.String,MassiveNet.RpcTarget,System.Object[])">
            <summary> Send overload that creates the NetMessage for the RPC. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.Send(System.Int32,System.Boolean,System.String,MassiveNet.NetConnection,System.Object[])">
            <summary> Send overload that creates the NetMessage for the RPC. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.Send(System.Int32,System.Boolean,System.String,System.Collections.Generic.List{MassiveNet.NetConnection},System.Object[])">
            <summary> Send overload that creates the NetMessage for the RPC. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.IncrementalSyncViews">
            <summary>
            Syncs views every frame in batches. The batch size (number of views to sync per frame)
            is calculated using the number of views, target frame rate, and syncs per second.
            This is the preferred server-side method to use when there are a large number of views
            to sync and framerate is stable. This method allows load to be spread evenly across frames.
            </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.TimedSyncViews">
            <summary>
            Syncs all owned views at intervals determined by SyncsPerSecond.
            This is generally the preferred method for client-side use.
            </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.CreateView(System.String)">
            <summary> Authoritatively creates a view that the server owns and triggers network instantiation. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.CreateView(MassiveNet.NetConnection,System.String)">
            <summary> Authoritatively creates a view for a connected client and triggers network instantiation. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.CreateView(System.Int32,System.String)">
            <summary> Authoritatively creates a view that the server owns and triggers network instantiation. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.CreateView(MassiveNet.NetConnection,System.Int32,System.String)">
            <summary> Authoritatively creates a view for a connected client and triggers network instantiation. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.DestroyView(MassiveNet.NetView)">
            <summary> Called by the server to destroy a NetView across the network. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.SendDestroyView(MassiveNet.NetView)">
            <summary> Sends command to all connected clients to destroy the provided view. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.ReceiveDestroyView(MassiveNet.NetMessage,MassiveNet.NetConnection)">
            <summary> Processes a DestroyView command, this destroys the GameObject associated with the provided viewId. </summary>
        </member>
        <member name="M:MassiveNet.NetViewManager.GetTarget(MassiveNet.RpcTarget,MassiveNet.NetView)">
            <summary>
             Returns the connection that matches the supplied target.
             Returns the server for Server or the first controller for Controllers.
            </summary>
        </member>
        <member name="T:MassiveNet.NetZone">
            <summary>
            Contains configuration parameters for Zones.
            </summary>
        </member>
        <member name="F:MassiveNet.NetZone.HandoverMinDistance">
            <summary>
            A NetConnection will be forced to handover to this Zone when within this range.
            </summary>
        </member>
        <member name="F:MassiveNet.NetZone.HandoverMaxDistance">
            <summary>
            The maximum distance from center a NetConnection can be before forcing handoff to another zone or disconnect.
            </summary>
        </member>
        <member name="F:MassiveNet.NetZone.ZoneSize">
            <summary>
            The radius of the zone. Under ideal conditions, this zone will only control NetConnections within this range.
            </summary>
        </member>
        <member name="F:MassiveNet.NetZone.HandoverDistance">
            <summary>
            How close a NetConnection must be to this Zone center before this Zone takes control.
            </summary>
        </member>
        <member name="M:MassiveNet.NetZone.#ctor(UnityEngine.Vector3,System.Int32,System.Int32)">
            <summary>
            Creates a Zone using the default size and handoff ranges.
            </summary>
        </member>
        <member name="M:MassiveNet.NetZone.#ctor(UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Zone using custom size and handoff ranges.
            </summary>
        </member>
        <member name="M:MassiveNet.NetZone.#ctor">
            <summary> Constructor used for deserialization. </summary>
        </member>
        <member name="T:MassiveNet.NetZoneServer">
            <summary>
            Assigned its duties by NetZoneManager, NetZoneServer provides functionality for maintaining
            awareness of peers and handing off appropriate NetViews to peers, as well as signaling to newly
            connected clients (NetZoneClient) of adjacent Zones to connect to.
            </summary>
        </member>
        <member name="E:MassiveNet.NetZoneServer.OnAssignment">
            <summary> Called when assigned to a Zone. </summary>
        </member>
        <member name="E:MassiveNet.NetZoneServer.OnClientSuccess">
            <summary> Called when a client succeeds to connect to all required Zone servers. </summary>
        </member>
        <member name="E:MassiveNet.NetZoneServer.OnClientFailed">
            <summary> Called when a client fails to connect to all required Zone servers. </summary>
        </member>
        <member name="P:MassiveNet.NetZoneServer.Position">
            <summary> Returns the position of the assigned Zone. </summary>
        </member>
        <member name="T:MassiveNet.NetZoneManager">
            <summary>
            Responsible for handling Zone creation and assignment of peers to unassigned Zones.
            </summary>
        </member>
        <member name="F:MassiveNet.NetZoneManager.ViewIdBlockSize">
            <summary> ViewIDs are allocated in blocks of this size. Each Zone will receive this number of ViewIDs to use. </summary>
        </member>
        <member name="F:MassiveNet.NetZoneManager.MaxViewId">
            <summary> The upper limit of ViewId. A ViewId larger than this number would break communications. </summary>
        </member>
        <member name="F:MassiveNet.NetZoneManager.unassignedPeers">
            <summary> Servers that have not been assigned or finished assignment. The value is true if the server is currently being assigned. </summary>
        </member>
        <member name="F:MassiveNet.NetZoneManager.viewAllocationPosition">
            <summary> The current allocation position. Whenever a ViewId range is allocated, this is incremented by ViewIdBlockSize. </summary>
        </member>
        <member name="F:MassiveNet.NetZoneManager.Authority">
            <summary> When true, acts as Zone authority. </summary>
        </member>
        <member name="M:MassiveNet.NetZoneManager.CreateZone(UnityEngine.Vector3)">
            <summary> Creates a Zone at the specified position. </summary>
        </member>
        <member name="M:MassiveNet.NetZoneManager.TryGetZone(UnityEngine.Vector3,MassiveNet.NetZone@)">
            <summary> Attempts to find a Zone for the provided position. </summary>
        </member>
        <member name="M:MassiveNet.NetZoneManager.AddSelfAsServer">
            <summary> Adds self as Zone assignment candidate. </summary>
        </member>
        <member name="T:MassiveNet.RpcMethodInfo">
            <summary> Contains needed invoke data for a method marked with the NetRPC attribute. </summary>
        </member>
        <member name="F:MassiveNet.RpcInfoCache.cached">
            <summary> True if CacheRpcs has been run. </summary>
        </member>
        <member name="M:MassiveNet.RpcInfoCache.RpcMethods">
            <summary>
            Returns the Dictionary containing the Rpc cache, running CacheRpcs beforehand if necessary.
            </summary>
        </member>
        <member name="M:MassiveNet.RpcInfoCache.CacheRpcs">
            <summary>
             Identifies all methods in Monobehaviour-inhereting classes with the NetRPC attribute
             and adds the relevant method information to the RPC cache. Ideally, this is run on
             startup instead of during operation since it is costly.
             </summary>
        </member>
        <member name="M:MassiveNet.RpcInfoCache.Exists(System.String)">
            <summary>
            Returns true if the Rpc cache contains a method that matches the supplied method name.
            </summary>
        </member>
        <member name="M:MassiveNet.RpcInfoCache.ParamTypes(System.String)">
            <summary> Returns a List of parameter types for the provided RPC name. </summary>
        </member>
        <member name="M:MassiveNet.RpcInfoCache.TakesRequests(System.String)">
            <summary> Returns true if the RPC method has a return value or has a NetRequest parameter. </summary>
        </member>
        <member name="M:MassiveNet.RpcInfoCache.CacheType(System.Type)">
            <summary> Iterates through the methods of the supplied type and adds any RPCs to the local RPC cache. </summary>
        </member>
        <member name="M:MassiveNet.RpcInfoCache.HasAttribute(System.Reflection.MemberInfo)">
            <summary> Returns true if member method has NetRPC attribute. </summary>
        </member>
        <member name="M:MassiveNet.RpcInfoCache.CreateInstanceLookup(UnityEngine.GameObject)">
            <summary>
            Creates a Dictionary with RPC method names as the key and the Monobehaviour instance for that method as the value.
            </summary>
        </member>
    </members>
</doc>
